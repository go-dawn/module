// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// LoginByEmailCode provides a mock function with given fields: email, code
func (_m *Service) LoginByEmailCode(email string, code string) (int, error) {
	ret := _m.Called(email, code)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(email, code)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginByMobileCode provides a mock function with given fields: mobile, code
func (_m *Service) LoginByMobileCode(mobile string, code string) (int, error) {
	ret := _m.Called(mobile, code)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(mobile, code)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(mobile, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginByPassword provides a mock function with given fields: username, pass
func (_m *Service) LoginByPassword(username string, pass string) (int, error) {
	ret := _m.Called(username, pass)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(username, pass)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, pass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterByEmailCode provides a mock function with given fields: email, code
func (_m *Service) RegisterByEmailCode(email string, code string) (int, error) {
	ret := _m.Called(email, code)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(email, code)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterByMobileCode provides a mock function with given fields: mobile, code
func (_m *Service) RegisterByMobileCode(mobile string, code string) (int, error) {
	ret := _m.Called(mobile, code)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(mobile, code)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(mobile, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterByPassword provides a mock function with given fields: username, pass
func (_m *Service) RegisterByPassword(username string, pass string) (int, error) {
	ret := _m.Called(username, pass)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(username, pass)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, pass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
